// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the root directory of this source tree.

// TODO: This sample tool downloads Azure Key Vault Managed certificates
// they can be self-signed certs or certs generated by CAs integrated
// with AKV. The format can be be PKCS12 or PEM.

package subcommands

import (
	"bytes"
	"context"
	"crypto/rand"
	"fmt"
	"net/url"
	"strings"

	"github.com/Azure/azure-storage-blob-go/azblob"
	"github.com/Azure/go-autorest/autorest/to"
	"github.com/paulomarquesc/azbloblease/azbloblease/internal/common"
	"github.com/paulomarquesc/azbloblease/azbloblease/internal/config"
	"github.com/paulomarquesc/azbloblease/azbloblease/internal/models"
	"github.com/paulomarquesc/azbloblease/azbloblease/internal/utils"
)

// CreateLeaseBlob - creates a blob to be used for storage lease process
func CreateLeaseBlob(cntx context.Context, subscriptionID, resourceGroupName, accountName, container, blobName, environment string) models.ResponseInfo {

	//-------------------------------------
	// Operations based on storage mgmt sdk
	//-------------------------------------
	response := models.ResponseInfo{
		SubscriptionID:     &subscriptionID,
		ResourceGroupName:  &resourceGroupName,
		StorageAccountName: &accountName,
		ContainerName:      &container,
		BlobName:           &blobName,
		Status:             to.StringPtr(config.Fail()),
	}

	// Getting AutoRest Environment object
	envInfo := utils.Environment(environment)

	// Getting storage client
	storageAccountMgmtClient, err := common.GetStorageAccountsClientWithBaseURI(envInfo.ResourceManagerEndpoint, subscriptionID, environment)
	if err != nil {
		utils.ConsoleOutput(fmt.Sprintf("an error ocurred while obtaining storage client/authorizer: %v.", err), config.Stderr())
		response.ErrorMessage = to.StringPtr(err.Error())
		return response
	}

	// Getting Storage Account Key
	accountKey, err := common.GetAccountKey(
		cntx,
		storageAccountMgmtClient,
		resourceGroupName,
		accountName,
	)
	if err != nil {
		utils.ConsoleOutput(fmt.Sprintf("an error ocurred while executing GetAccountKey: %v.", err), config.Stderr())
		response.ErrorMessage = to.StringPtr(err.Error())
		return response
	}

	//-----------------------------------
	// Operations based on azblob package
	//-----------------------------------

	// Create a credential object; this is used to access account while using azblob module.
	credential, err := azblob.NewSharedKeyCredential(accountName, accountKey)
	if err != nil {
		utils.ConsoleOutput(fmt.Sprintf("an error ocurred while obtaining azblob credential: %v.", err), config.Stderr())
		response.ErrorMessage = to.StringPtr(err.Error())
		return response
	}

	// Creating azblob request pipeline
	requestPipeline := azblob.NewPipeline(credential, azblob.PipelineOptions{})

	blobEndppointURL, err := url.Parse(
		common.GetAccountBlobEndpoint(cntx, storageAccountMgmtClient, resourceGroupName, accountName),
	)

	if err != nil {
		utils.ConsoleOutput(fmt.Sprintf("an error ocurred while obtaining blob endpoint: %v.", err), config.Stderr())
		response.ErrorMessage = to.StringPtr(err.Error())
		return response
	}

	// Create an ServiceURL object that wraps the service URL and a request pipeline.
	serviceURL := azblob.NewServiceURL(*blobEndppointURL, requestPipeline)

	// Create a URL that references a container in Azure Storage account to create the lease
	// This returns a ContainerURL object that wraps the container's URL and a request pipeline (inherited from serviceURL)
	containerURL := serviceURL.NewContainerURL(container)

	// Check if container already exists
	_, err = containerURL.GetProperties(cntx, azblob.LeaseAccessConditions{})
	if err != nil {
		if !strings.Contains(err.Error(), "ContainerNotFound") {
			utils.ConsoleOutput(fmt.Sprintf("an error occurred while checking if container %v exists: %v", container, err), config.Stderr())
			response.ErrorMessage = to.StringPtr(err.Error())
			return response
		}

		// Let's create a new container
		_, err = containerURL.Create(cntx, nil, azblob.PublicAccessNone)
		if err != nil {
			utils.ConsoleOutput(fmt.Sprintf("an error occurred trying to create container %v: %v", container, err), config.Stderr())
			response.ErrorMessage = to.StringPtr(err.Error())
			return response
		}
	}

	// Create a URL that references the blob used to acquire the lock
	// This returns a BlockBlobURL object that wraps the blob's URL and a request pipeline (inherited from containerURL)
	blobURL := containerURL.NewBlockBlobURL(blobName)

	// Check if Blob already exists
	_, err = blobURL.GetProperties(cntx, azblob.BlobAccessConditions{})
	if err != nil {
		if !strings.Contains(err.Error(), "BlobNotFound") {
			utils.ConsoleOutput(fmt.Sprintf("an error occurred while checking if blob %v exists: %v", blobName, err), config.Stderr())
			response.ErrorMessage = to.StringPtr(err.Error())
			return response
		}

		// Perform UploadStreamToBlockBlob to create new blob for leasing

		// Create some data for the upload stream
		blobSize := 1024 // 1KB
		data := make([]byte, blobSize)
		rand.Read(data)

		bufferSize := 2 * 1024 * 1024 // Configure the size of the rotating buffers that are used when uploading
		maxBuffers := 3               // Configure the number of rotating buffers that are used when uploading
		_, err = azblob.UploadStreamToBlockBlob(
			cntx,
			bytes.NewReader(data),
			blobURL,
			azblob.UploadStreamToBlockBlobOptions{BufferSize: bufferSize, MaxBuffers: maxBuffers},
		)

		if err != nil {
			utils.ConsoleOutput(fmt.Sprintf("an error occurred while uploading blob stream: %v", err), config.Stderr())
			response.ErrorMessage = to.StringPtr(err.Error())
			return response
		}
		response.Status = to.StringPtr(config.Success())
		return response
	}

	response.Status = to.StringPtr(config.SuccessAlreadyExists())
	return response
}
