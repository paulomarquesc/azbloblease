// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the root directory of this source tree.

// TODO: This sample tool downloads Azure Key Vault Managed certificates
// they can be self-signed certs or certs generated by CAs integrated
// with AKV. The format can be be PKCS12 or PEM.

package common

import (
	"context"
	"fmt"

	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage"
	"github.com/paulomarquesc/azbloblease/azbloblease/internal/config"
	"github.com/paulomarquesc/azbloblease/azbloblease/internal/utils"
)

// GetAccountProperties returns storage account properties
func GetAccountProperties(cntx context.Context, accountsClient armstorage.AccountsClient, resourceGroupName, accountName string) (armstorage.AccountsClientGetPropertiesResponse, error) {

	storageAccountProps, err := accountsClient.GetProperties(
		cntx,
		resourceGroupName,
		accountName,
		nil,
	)

	if err != nil {
		utils.ConsoleOutput(fmt.Sprintf("an error ocurred while getting storage account properties: %v", err), config.Stderr())
		return armstorage.AccountsClientGetPropertiesResponse{}, err
	}

	return storageAccountProps, nil
}

// GetAccountBlobEndpoint gets the url of the blobendpoint, needed by azblob package
func GetAccountBlobEndpoint(cntx context.Context, accountsClient *armstorage.AccountsClient, resourceGroupName, accountName string) string {
	// Getting Storage Account Properties to identify the blob endpoint
	storageAccountProps, err := GetAccountProperties(
		cntx,
		*accountsClient,
		resourceGroupName,
		accountName,
	)

	if err != nil {
		utils.ConsoleOutput(fmt.Sprintf("an error ocurred while obtaining account properties: %v.", err), config.Stderr())
		return ""
	}

	return *storageAccountProps.Properties.PrimaryEndpoints.Blob

}
